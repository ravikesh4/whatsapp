{"version":3,"sources":["firebase.js","components/SidebarChat.js","components/StateProvider.js","components/Sidebar.js","components/Chat.js","components/reducer.js","components/Login.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","SidebarChat","id","name","addNewChat","useState","seed","setSeed","messages","setMessages","useEffect","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","Math","floor","random","onClick","roomName","prompt","add","className","to","Avatar","src","message","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","Sidebar","rooms","setRooms","user","unsubscribe","photoURL","IconButton","DonutLarge","Chat","MoreVert","SearchOutlined","placeholder","room","key","input","setInput","roomId","useParams","setRoomName","Date","length","timestamp","toDate","toString","AttachFile","displayName","InsertEmoticon","type","onChange","e","target","preventDefault","console","log","FieldValue","serverTimestamp","Mic","actionTypes","state","action","Login","dispatch","Button","signInWithPopup","then","result","catch","error","alert","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.98c5b94b.chunk.js","sourcesContent":["import firebase from 'firebase'\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyC2EhKrW-dIonFTSAzui-pLD3DupLYv-ys\",\r\n    authDomain: \"chat-90a02.firebaseapp.com\",\r\n    databaseURL: \"https://chat-90a02.firebaseio.com\",\r\n    projectId: \"chat-90a02\",\r\n    storageBucket: \"chat-90a02.appspot.com\",\r\n    messagingSenderId: \"268455406161\",\r\n    appId: \"1:268455406161:web:4315739280c963be356670\",\r\n    measurementId: \"G-M0CV6RJ9E5\"\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig)\r\n\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth()\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n\r\n\r\nexport { auth, provider }\r\nexport default db;","import React, { useEffect, useState } from 'react'\r\nimport './SidebarChat.css'\r\nimport { Avatar } from '@material-ui/core'\r\nimport db from '../firebase';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction SidebarChat({ id, name, addNewChat }) {\r\n    const [seed, setSeed] = useState('');\r\n    const [messages, setMessages] = useState('');\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            db.collection('rooms').doc(id).collection('messages').orderBy('timestamp', 'desc')\r\n            .onSnapshot(snapshot => (\r\n                setMessages(snapshot.docs.map((doc) => doc.data()))\r\n            ))\r\n        }\r\n    }, [id])\r\n\r\n    useEffect(() => {\r\n        setSeed(Math.floor(Math.random() * 5000))\r\n    }, [])\r\n\r\n    const createChat = () => {\r\n        const roomName = prompt(\"Please enter name for chat\")\r\n\r\n        if (roomName) {\r\n            // do something\r\n            db.collection('rooms').add({\r\n                name: roomName\r\n            })\r\n        }\r\n    }\r\n\r\n    return !addNewChat ? (\r\n        <Link to={`/rooms/${id}`}>\r\n            <div className=\"sidebarChat\">\r\n                <Avatar src={`https://avatars.dicebear.com/api/human/${seed}.svg`} />\r\n                <div className=\"sidebarChat__info\">\r\n                    <h2>{name}</h2>\r\n                    <p>{messages[0]?.message}</p>\r\n                </div>\r\n            </div>\r\n        </Link>\r\n    ) : (\r\n            <div onClick={createChat}\r\n                className=\"sidebarChat\">\r\n                <h2>Add new chat</h2>\r\n            </div>\r\n        )\r\n}\r\n\r\nexport default SidebarChat\r\n","import React, { createContext, useReducer, useContext } from 'react'\r\n\r\nexport const StateContext = createContext();\r\n\r\nexport const StateProvider = ({ reducer, initialState, children }) => (\r\n    <StateContext.Provider value={useReducer(reducer, initialState)}>\r\n        {children}\r\n    </StateContext.Provider>\r\n)\r\n\r\nexport const useStateValue = () => useContext(StateContext)","import React, { useState, useEffect } from 'react'\r\nimport './Sidebar.css'\r\nimport { DonutLarge, Chat, MoreVert, SearchOutlined } from '@material-ui/icons'\r\nimport { Avatar, IconButton } from '@material-ui/core'\r\nimport SidebarChat from './SidebarChat'\r\nimport db from '../firebase'\r\nimport { useStateValue } from './StateProvider'\r\n\r\nfunction Sidebar() {\r\n\r\n    const [rooms, setRooms] = useState([])\r\n    const [{ user }, dispatch] = useStateValue();\r\n\r\n\r\n    useEffect(() => {\r\n        const unsubscribe = db.collection('rooms').onSnapshot(snapshot => (\r\n            setRooms(snapshot.docs.map(doc => ({\r\n                id: doc.id,\r\n                data: doc.data()\r\n            })\r\n            ))\r\n        ))\r\n\r\n        return () => {\r\n            unsubscribe();\r\n        }\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div className=\"sidebar\">\r\n            <div className=\"sidebar__header\">\r\n                <Avatar src={user?.photoURL} />\r\n                <div className=\"sidebar__headerRight\">\r\n                    <IconButton><DonutLarge /></IconButton>\r\n                    <IconButton><Chat /></IconButton>\r\n                    <IconButton><MoreVert /></IconButton>\r\n                </div>\r\n            </div>\r\n            <div className=\"sidebar__search\">\r\n                <div className=\"sidebar__searchContainer\">\r\n                    <SearchOutlined />\r\n                    <input placeholder=\"Search here\" />\r\n\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"sidebar__chats\">\r\n                <SidebarChat addNewChat />\r\n                {rooms.map(room => (\r\n                    <SidebarChat key={room.id} id={room.id} name={room.data.name} />\r\n                ))}\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar\r\n","import React, { useState, useEffect } from 'react'\r\nimport './Chat.css'\r\nimport { useParams } from 'react-router-dom'\r\nimport { Avatar, IconButton } from '@material-ui/core'\r\nimport { SearchOutlined, AttachFile, MoreVert, InsertEmoticon, Mic } from '@material-ui/icons'\r\nimport db from '../firebase'\r\nimport { useStateValue } from './StateProvider'\r\nimport firebase from 'firebase'\r\n\r\nfunction Chat() {\r\n\r\n    const [input, setInput] = useState(\"\")\r\n    const [seed, setSeed] = useState(\"\")\r\n    const { roomId} = useParams();\r\n    const [roomName, setRoomName] = useState(\"\")\r\n    const [messages, setMessages] = useState([])\r\n    const [{user}, dispatch] = useStateValue();\r\n\r\n    useEffect(() => {\r\n        if(roomId) {\r\n            db.collection('rooms').doc(roomId).onSnapshot(snapshot => (\r\n                setRoomName(snapshot.data().name)\r\n            ))\r\n        setSeed(Math.floor(Math.random() * 5000))\r\n\r\n        db.collection(\"rooms\").doc(roomId).collection(\"messages\").orderBy('timestamp', 'asc')\r\n        .onSnapshot(snapshot => setMessages(snapshot.docs.map(doc => \r\n            doc.data())))\r\n\r\n        }\r\n    }, [roomId])\r\n    \r\n\r\n    useEffect(() => {\r\n        setSeed(Math.floor(Math.random() * 5000))\r\n    }, [])\r\n\r\n    const sendMessage = (e) => {\r\n        e.preventDefault()\r\n        console.log('typed', input);\r\n\r\n        db.collection('rooms').doc(roomId).collection('messages').add({\r\n            message: input,\r\n            name: user.displayName,\r\n            timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n        })\r\n\r\n\r\n        setInput(\"\")\r\n    }\r\n    return (\r\n        <div className=\"chat\">\r\n\r\n            <div className=\"chat__header\">\r\n                <Avatar src={`https://avatars.dicebear.com/api/human/${seed}.svg`} />\r\n\r\n                <div className=\"chat__headerInfo\">\r\n                    <h3>{roomName}</h3>\r\n                    <p>Last Seen{\" \"}\r\n                    {new Date(\r\n                        messages[messages.length - 1]?.timestamp?.toDate()\r\n                    ).toString()}\r\n                    </p>\r\n                </div>\r\n\r\n                <div className=\"chat__headerRight\">\r\n                    <IconButton><SearchOutlined /></IconButton>\r\n                    <IconButton><AttachFile /></IconButton>\r\n                    <IconButton><MoreVert /></IconButton>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"chat__body\">\r\n                {messages.map( message => (\r\n                <p className={`chat__message ${message.name === user.displayName && 'chat__reciever'}`}>\r\n                    <span className=\"chat__name\">{message.name}</span>\r\n                    {message.message}\r\n                <span className=\"chat__timestamp\">\r\n                    {/* {new Date(message.timestamp.toDate().toString())} */}\r\n                    {new Date(\r\n                        message?.timestamp?.toDate()\r\n                    ).toString()}</span>\r\n                {/* <span className=\"chat__timestamp\">{message.timestamp}</span> */}\r\n                </p>\r\n                ))}\r\n            </div>\r\n\r\n            <div className=\"chat__footer\">\r\n                <InsertEmoticon />\r\n                <form>\r\n                    <input type=\"text\" value={input} onChange={e => setInput(e.target.value)} placeholder=\"Type a message\" />\r\n                    <button onClick={sendMessage} type=\"submit\">Send Message</button>\r\n                </form>\r\n                <Mic />\r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat\r\n","export const initialState = {\r\n    user: null,\r\n}\r\n\r\nexport const actionTypes = {\r\n    SET_USER: \"SET_USER\"\r\n}\r\n\r\nconst reducer = (state, action) => {\r\n    console.log(action)\r\n    switch (action.type) {\r\n        case actionTypes.SET_USER:\r\n            return {\r\n                ...state,\r\n                user: action.user\r\n            };\r\n\r\n            default: \r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import React from 'react'\r\nimport './Login.css'\r\nimport { Button } from '@material-ui/core'\r\nimport { auth, provider } from '../firebase'\r\nimport { useStateValue } from './StateProvider'\r\nimport { actionTypes } from './reducer'\r\n\r\nfunction Login() {\r\n\r\n    const [{}, dispatch] = useStateValue();\r\n\r\n    const signIn = () => {\r\n        auth.signInWithPopup(provider).then(result => {\r\n            dispatch({\r\n                type: actionTypes.SET_USER,\r\n                user: result.user\r\n            })\r\n        })\r\n        .catch(error => alert(error.message))\r\n    }\r\n    return (\r\n        <div className=\"login\">\r\n            <div className=\"login__container\">\r\n                \r\n                <div className=\"login__text\">\r\n\r\n                    <h1>Signin to whatsapp</h1>\r\n                </div>\r\n\r\n                <Button onClick={signIn}>\r\n                    Signin with google\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport Sidebar from './components/Sidebar';\nimport Chat from './components/Chat';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport Login from './components/Login';\nimport { useStateValue } from './components/StateProvider';\nfunction App() {\n\n  const [{user}, dispatch] = useStateValue();\n\n  return (\n    <div className=\"app\">\n      {!user ? (\n        <Login />\n      ) : (\n\n          <div className=\"app__body\">\n            <Router>\n              <Sidebar />\n              <Switch>\n                <Route path=\"/rooms/:roomId\">\n                  <Chat />\n                </Route>\n                <Route path=\"/\">\n                  <Chat />\n                </Route>\n              </Switch>\n            </Router>\n\n          </div>\n        )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { StateProvider } from './components/StateProvider';\nimport reducer, { initialState } from \"./components/reducer\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider initialState={initialState} reducer={reducer}>\n      <App />\n    </StateProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}